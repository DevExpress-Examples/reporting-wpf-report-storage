<?xml version="1.0" standalone="yes"?>
<StorageDataSet xmlns="http://tempuri.org/StorageDataSet.xsd">
  <xs:schema id="StorageDataSet" targetNamespace="http://tempuri.org/StorageDataSet.xsd" xmlns:mstns="http://tempuri.org/StorageDataSet.xsd" xmlns="http://tempuri.org/StorageDataSet.xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" attributeFormDefault="qualified" elementFormDefault="qualified">
    <xs:element name="StorageDataSet" msdata:IsDataSet="true" msdata:UseCurrentLocale="true">
      <xs:complexType>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="ReportStorage">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="ID" type="xs:string" minOccurs="0" />
                <xs:element name="Title" type="xs:string" minOccurs="0" />
                <xs:element name="Buffer" type="xs:base64Binary" minOccurs="0" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:choice>
      </xs:complexType>
    </xs:element>
  </xs:schema>
  <ReportStorage>
    <ID>0f2a3c02-9db1-4e9d-9179-289e68aaf99c</ID>
    <Title>TestReportOne</Title>
    <Buffer></Buffer>
  </ReportStorage>
</StorageDataSet>